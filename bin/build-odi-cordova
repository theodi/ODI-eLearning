#!/bin/bash
# Syntax ./bin/build-odi module1 en
if [ -z $1 ]
then
	echo "Specify a module you idiot!"
	echo "./bin/build module_id language"
	exit
fi
if [ -z $2 ]
then
	echo "Specify a language you idiot!"
	echo "./bin/build module_id language"
	exit
fi
OUTPATH=modules/cordova/
THEME="default"
echo "Retriving module"
git --git-dir=.module checkout $1
#git --git-dir=.module pull
echo "Copying video over"
echo ""
`cp src/course/en/video/video.mp4 src/course/$2/video/video.mp4`

echo "Backing up languages"
rm -fR tmp
mkdir tmp
echo ""
`cp -r src/course/* tmp/`
echo "Selecting language"
echo ""
`rm -fR src/course/*`
`cp -r tmp/$2 src/course/`

echo "Merging theme configs"
echo ""
`node ./bin/merge.js src/course/$2/articles.json src/theme/$THEME/course/$2/articles.json`
`node ./bin/merge.js src/course/$2/config.json src/theme/$THEME/course/$2/config.json`
`node ./bin/merge.js src/course/$2/contentObjects.json src/theme/$THEME/course/$2/contentObjects.json`
`node ./bin/merge.js src/course/$2/course.json src/theme/$THEME/course/$2/course.json`

`cp src/course/$2/config.json src/course/`
#echo "Updating control path"
#echo ""
#sed -i -e "s/en\/course\/en\/js\/control/$2\/course\/$2\/js\/control/g" src/index.html
echo "Adding cordova javascript"
echo ""
sed -i -e "s/<\/head>/<script type=\"text\/javascript\" src=\"..\/cordova.js\"><\/script><script type=\"text\/javascript\" src=\"..\/cordova-odi.js\"><\/script><\/head>/g" src/index.html

echo "Hiding language selector in theme"
echo ""
sed -i -e "s/country-select/bcountry-select/g" src/theme/default/templates/navigation.hbs

echo "Changing ownership"
echo ""
sed -i -e "s/European Data Portal/Open Data Institute's/g" src/course/$2/components.json
sed -i -e "s/Européen de Données/Open Data Institute/g" src/course/$2/components.json

echo "Updating image path"
echo ""
sed -i -e "s/course\/en\/images/course\/$2\/images/g" src/theme/default/less/header.less

echo "Changing video to native player"
echo ""
sed -i -e "s/iFrame-vimeo/media/g" src/course/$2/components.json
sed -i -e "s/instruction/binstruction/g" src/course/$2/components.json

echo "Adding index.html to all internal links"
sed -i -e "s/\"..\/\"/\"..\/index.html\"/g" src/course/$2/course.json
sed -i -e "s/\.\.\//\.\.\/index.html/g" src/theme/default/js/vanilla.js
sed -i -e "s/welcome\//welcome\/index.html/g" src/theme/default/js/vanilla.js

echo "Disabling data downloads"
echo ""
sed -i -e "s/course\/$2\/components.json/javascript:alert('Data is not available via the mobile application.');/g" src/course/$2/course.json
sed -i -e "s/course\/$2\/course.json/javascript:alert('Data is not available via the mobile application.');/g" src/course/$2/course.json
sed -i -e "s/course\/$2\/data\/scorm.zip/javascript:alert('Data is not available via the mobile application.');/g" src/course/$2/course.json

for i in `seq 1 13`;
do
	sed -i -e "s/module$i\//module$i\/index.html/g" src/course/$2/course.json
done
if [ $2 == "en" ]
then
	sed -i -e "s/'>Main/index.html'>Main/g" src/course/en/components.json
	sed -i -e "s/'>Next/index.html'>Next/g" src/course/en/components.json
else
	sed -i -e "s/'>Menu/index.html'>Menu/g" src/course/fr/components.json
	sed -i -e "s/'>Prochain/index.html'>Prochain/g" src/course/fr/components.json
fi

echo "Building module";
rm -fR build
grunt build --theme=default

echo "Restoring structure";
`rm -fR src/course/*`
`mv tmp/* src/course/`
sed -i -e "s/course\/$2\/images/course\/en\/images/g" src/theme/default/less/header.less
sed -i -e "s/\.\.\/index.html/\.\.\//g" src/theme/default/js/vanilla.js
sed -i -e "s/welcome\/index.html/welcome\//g" src/theme/default/js/vanilla.js
sed -i -e "s/bcountry-select/country-select/g" src/theme/default/templates/navigation.hbs
#sed -i -e "s/$2\/course\/$2\/js\/control/en\/course\/en\/js\/control/g" src/index.html
sed -i -e "s/<script type=\"text\/javascript\" src=\"..\/cordova.js\"><\/script><script type=\"text\/javascript\" src=\"..\/cordova-odi.js\"><\/script>//g" src/index.html

#echo "building scorm package"
#cd build
#zip -r course/$2/data/scorm.zip * >/dev/null
#cd ..

echo "Moving module into place"
`mkdir $OUTPATH/$2/`
`rm -fR $OUTPATH/$2/$1`
`cp -r build $OUTPATH/$2/$1`

`rm -fR build`

echo "Symlinking to the Cordova directory"
`ln -s $(pwd)/$OUTPATH/$2 $(pwd)/cordova/www`
